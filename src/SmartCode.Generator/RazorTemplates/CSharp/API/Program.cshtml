@using SmartCode
@inherits SmartCode.TemplateEngine.Impl.RazorCoreTemplate<BuildContext>
@{
    var project = Model.Project;
}
@Include("../Copyright.cshtml", Model)

using System.Reflection;
using @(project.Module).API.Filters;
using Microsoft.OpenApi.Models;

const string SERVICE_NAME = "@(project.Module).API";
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers(options =>
{
options.Filters.Add@("<GlobalExceptionFilter>")();
options.Filters.Add@("<GlobalValidateModelFilter>")();
});
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSmartSql()
.AddRepositoryFromAssembly(options =>
{
options.AssemblyString = "@(project.Module).Repository";
});

var assembly = Assembly.Load("@(project.Module).Service");
var allTypes = assembly.GetTypes();
foreach (var type in allTypes.Where(t =>
             !new[] { "EmbeddedAttribute", "NullableAttribute", "NullableContextAttribute" }.Contains(t.Name)))
{
builder.Services.AddSingleton(type);
}

builder.Services.AddSwaggerGen(c =>
{
c.SwaggerDoc("v1", new OpenApiInfo
{
Title = SERVICE_NAME,
Version = "v1",
Description = "https://github.com/Smart-Kit/SmartCode"
});
c.CustomSchemaIds(type => type.FullName);
var filePath = Path.Combine(AppContext.BaseDirectory, $"{SERVICE_NAME}.xml");
if (File.Exists(filePath))
{
c.IncludeXmlComments(filePath);
}
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
app.UseSwagger();
app.UseSwaggerUI(c =>
{
c.SwaggerEndpoint("/swagger/v1/swagger.json", SERVICE_NAME);
});
}

app.UseAuthorization();

app.MapControllers();

app.Run();