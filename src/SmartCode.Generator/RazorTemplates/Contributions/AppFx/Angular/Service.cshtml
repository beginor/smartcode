@using SmartCode
@using SmartCode.Generator.Entity
@using static SmartCode.Generator.RazorTemplates.Contributions.AppFx.Common
@inherits SmartCode.TemplateEngine.Impl.RazorCoreTemplate<SmartCode.BuildContext>
@{
    var project = Model.Project;
    var build = Model.Build;
    var table = Model.GetCurrentTable();
}
import { Injectable, Inject, ErrorHandler } from '@@angular/core';
import { HttpClient, HttpParams } from '@@angular/common/http';
import { BehaviorSubject, lastValueFrom } from 'rxjs';

import { UiService } from 'projects/web/src/app/common';

/** @table.GetSummary()服务 */
@@Injectable({
    providedIn: 'root'
})
export class @(ToClassName(table.Name))Service {

    public searchModel: @(ToClassName(table.Name))SearchModel = {
        skip: 0,
        take: 10
    };
    public total = new BehaviorSubject<number>(0);
    public data = new BehaviorSubject<@(ToClassName(table.Name))Model[]>([]);
    public loading = false;
    public showPagination = false;

    private baseUrl = `${this.apiRoot}/@(ToPath(table.Name))`;

    constructor(
        private http: HttpClient,
        @@Inject('apiRoot') private apiRoot: string,
        private ui: UiService,
        private errorHandler: ErrorHandler
    ) { }

    @($"/** 搜索{table.GetSummary()} */")
    public async search(): Promise<void> {
        let params = new HttpParams();
        for (const key in this.searchModel) {
            if (this.searchModel.hasOwnProperty(key)) {
                const val = this.searchModel[key] as string;
                params = params.set(key, val);
            }
        }
        this.loading = true;
        try {
            const result = await lastValueFrom(
                this.http.get<@(ToClassName(table.Name))ResultModel>(this.baseUrl, { params }) // eslint-disable-line max-len
            );
            const total = result.total ?? 0;
            const data = result.data ?? [];
            this.total.next(total);
            this.data.next(data);
            this.showPagination = total > data.length;
        }
        catch (ex) {
            this.errorHandler.handleError(ex);
            this.total.next(0);
            this.data.next([]);
            this.ui.showAlert(
                { type: 'danger', message: @($"'加载{table.GetSummary()}数据出错!'")}
            );
        }
        finally {
            this.loading = false;
        }
    }

    @($"/** 更改页码分页查询 */")
    public async onPageChange(p: number): Promise<void> {
        this.searchModel.skip = (p - 1) * this.searchModel.take;
        await this.search();
    }

    @($"/** 更改分页大小 */")
    public async onPageSizeChange(): Promise<void> {
        this.searchModel.skip = 0;
        await this.search();
    }

    @($"/** 创建{table.GetSummary()} */")
    public async create(
        model: @(ToClassName(table.Name))Model
    ): Promise<@(ToClassName(table.Name))Model | undefined> {
        try {
            const result = await lastValueFrom(
                this.http.post<@(ToClassName(table.Name))Model>(this.baseUrl, model) // eslint-disable-line max-len
            );
            return result;
        }
        catch (ex) {
            this.errorHandler.handleError(ex);
            this.ui.showAlert(
                { type: 'danger', message: @($"'创建{table.GetSummary()}出错！'") }
            );
            return;
        }
    }

    @($"/** 获取指定的{table.GetSummary()} */")
    public async getById(id: string): Promise<@(ToClassName(table.Name))Model | undefined> {
        try {
            const result = await lastValueFrom(
                this.http.get<@(ToClassName(table.Name))Model>(`${this.baseUrl}/${id}`) // eslint-disable-line max-len
            );
            return result;
        }
        catch (ex) {
            this.errorHandler.handleError(ex);
            this.ui.showAlert(
                { type: 'danger', message: @($"'获取指定的{table.GetSummary()}出错！'") }
            );
            return;
        }
    }

    @($"/** 删除{table.GetSummary()} */")
    public async delete(id: string): Promise<boolean> {
        const confirm = await this.ui.showConfirm('确认删除么？');
        if (!confirm) {
            return false;
        }
        try {
            await lastValueFrom(
                this.http.delete(`${this.baseUrl}/${id}`) // eslint-disable-line max-len
            );
            return true;
        }
        catch (ex) {
            this.errorHandler.handleError(ex);
            this.ui.showAlert(
                { type: 'danger', message: @($"'删除{table.GetSummary()}出错！'") }
            );
            return false;
        }
    }

    @($"/** 更新{table.GetSummary()} */")
    public async update(
        id: string,
        model: @(ToClassName(table.Name))Model
    ): Promise<@(ToClassName(table.Name))Model | undefined> {
        try {
            const result = await lastValueFrom(
                this.http.put<@(ToClassName(table.Name))Model>(`${this.baseUrl}/${id}`, model) // eslint-disable-line max-len
            );
            return result;
        }
        catch (ex) {
            this.errorHandler.handleError(ex);
            this.ui.showAlert(
                { type: 'danger', message: @($"'更新{table.GetSummary()}出错！'") }
            );
            return;
        }
    }

}

/** @table.GetSummary() */
export interface @(ToClassName(table.Name))Model {
@foreach (var col in table.Columns) {
    @(PadLeft(4) + $"/** {col.GetSummary()} */{NewLine()}")
    @(PadLeft(4) + $"{col.ConvertedName}" + (col.IsNullable ? "?:" : ":") + $" {ConvertTsType(col)};{NewLine()}")
}
}

/** @table.GetSummary() 搜索参数 */
export interface @(ToClassName(table.Name))SearchModel {
    [key: string]: undefined | number | string;
    /** 跳过的记录数 */
    skip: number;
    /** 取多少条记录 */
    take: number;
}

/** @(table.GetSummary()) 搜索结果 */
export interface @(ToClassName(table.Name))ResultModel {
    /** 请求跳过的记录数 */
    skip?: number;
    /** 请求多少条记录 */
    take?: number;
    /** 总记录数 */
    total?: number;
    /** 数据列表 */
    data?: @(ToClassName(table.Name))Model[];
}
