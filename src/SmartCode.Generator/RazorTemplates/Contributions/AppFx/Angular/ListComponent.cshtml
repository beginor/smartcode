@using SmartCode
@using SmartCode.Generator.Entity
@using static SmartCode.Generator.RazorTemplates.Contributions.AppFx.Common
@inherits SmartCode.TemplateEngine.Impl.RazorCoreTemplate<SmartCode.BuildContext>
@{
    var project = Model.Project;
    var build = Model.Build;
    var table = Model.GetCurrentTable();
}
import { Component, OnInit } from '@@angular/core';
import { CommonModule } from '@@angular/common';
import { FormsModule } from '@@angular/forms';
import { NzDrawerService } from 'ng-zorro-antd/drawer';
import { NzTableQueryParams } from 'ng-zorro-antd/table';

import { AccountService, SvgIconComponent } from 'app-shared';
import { UiService, AntdModule } from 'projects/web/src/app/common';

import { @(ToClassName(table.Name))Service } from '../@(ToPath(table.Name)).service';
import { DetailComponent } from '../detail/detail.component';

@@Component({
    selector: '@(ToNgSelector(table.Name))-list',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        AntdModule,
        SvgIconComponent,
    ],
    templateUrl: './list.component.html',
    styleUrl: './list.component.css'
})
export class ListComponent implements OnInit {

    constructor(
        private drawerService: NzDrawerService,
        private ui: UiService,
        protected account: AccountService,
        protected vm: @(ToClassName(table.Name))Service
    ) { }

    public ngOnInit(): void {
        this.ui.breadcrumbs.set([
            { label: '首页', url: '/' },
            { label: '请填写面包屑', url: '/' },
            { label: '@(table.GetSummary())' }
        ]);
    }

    public async loadData({
        pageSize = 10,
        pageIndex = 1,
        // sort = [],
        // filter = [],
    }: Partial<NzTableQueryParams>): Promise<void> {
        this.vm.pageSize = pageSize;
        this.vm.pageIndex = pageIndex;
        await this.vm.search();
    }

    public showDetail(id: string, editable: boolean): void {
        const ref = this.drawerService.create<
            DetailComponent,
            Partial<DetailComponent>,
            string
        >({
            nzClosable: false,
            nzPlacement: 'right',
            nzWidth: '40vw',
            nzContent: DetailComponent,
            nzBodyStyle: { padding: '0' },
            nzData: { id, editable },
        });
        ref.afterClose.subscribe(result => {
            if (result === 'ok') {
                void this.vm.search();
            }
        });
    }

    public delete(id: string): void {
        this.vm.delete(id).then(deleted => {
            if (deleted) {
                void this.vm.search();
            }
        }).catch(ex => {
            console.log(`offcanvas canceled with reason ${ex}`)
        });
    }

    public async clearKeywords(): Promise<void> {
        this.vm.searchModel.keywords = '';
        this.loadData({});
    }

}
