@using SmartCode
@using SmartCode.Generator.Entity
@using static SmartCode.Generator.RazorTemplates.Contributions.AppFx.Common
@inherits SmartCode.TemplateEngine.Impl.RazorCoreTemplate<SmartCode.BuildContext>
@{
    var project = Model.Project;
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
}
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Beginor.AppFx.Api;
using Beginor.AppFx.Core;
using @(project.Author).@(project.Module).Models;
using @(project.Author).@(project.Module).Data.Repositories;

namespace @(project.Author).@(project.Module).@(buildTask.Module).Controllers;

/// <summary>@table.GetSummary() 服务接口</summary>
[ApiController]
[Route("api/@ToPath(table.Name)")]
public class @(table.ConvertedName)Controller(
    ILogger<@(table.ConvertedName)Controller> logger,
    I@(table.ConvertedName)Repository repository
) : Controller {

    /// <summary>搜索 @(table.GetSummary()) , 分页返回结果</summary>
    /// <response code="200">成功, 分页返回结果</response>
    /// <response code="400">客户端发送错误请求</response>
    /// <response code="500">服务器内部错误</response>
    [HttpGet("")]
    [Authorize("@(table.Name).read")]
    public async Task<ActionResult<PaginatedResponseModel<@(table.ConvertedName)Model>>> Search(
        [FromQuery]@(table.ConvertedName)SearchModel model
    ) {
        try {
            var result = await repository.SearchAsync(model);
            return result;
        }
        catch (InvalidOperationException ex) {
            logger.LogWarning(ex.GetOriginalMessage());
            return BadRequest();
        }
        catch (Exception ex) {
            logger.LogError(ex, $"Can not search @(table.Name) with {model.ToJson()} .");
            return this.InternalServerError(ex);
        }
    }

    /// <summary>获取指定的 @(table.GetSummary())</summary>
    /// <response code="200">返回 @(table.GetSummary()) 信息</response>
    /// <response code="400">客户端发送错误请求</response>
    /// <response code="500">服务器内部错误</response>
    [HttpGet("{id:long}")]
    [Authorize("@(table.Name).read_by_id")]
    public async Task<ActionResult<@(table.ConvertedName)Model>> GetById(long id) {
        try {
            var result = await repository.GetByIdAsync(id);
            return result;
        }
        catch (InvalidOperationException ex) {
            logger.LogWarning(ex.GetOriginalMessage());
            return BadRequest();
        }
        catch (Exception ex) {
            logger.LogError(ex, $"Can not get @(table.Name) by id {id}.");
            return this.InternalServerError(ex);
        }
    }

    /// <summary> 创建 @(table.GetSummary()) </summary>
    /// <response code="200">创建 @(table.GetSummary()) 成功</response>
    /// <response code="400">客户端发送错误请求</response>
    /// <response code="500">服务器内部错误</response>
    [HttpPost("")]
    [Authorize("@(table.Name).create")]
    public async Task<ActionResult<@(table.ConvertedName)Model>> Create(
        [FromBody]@(table.ConvertedName)Model model
    ) {
        try {
            await repository.SaveAsync(model);
            return model;
        }
        catch (InvalidOperationException ex) {
            logger.LogWarning(ex.GetOriginalMessage());
            return BadRequest();
        }
        catch (Exception ex) {
            logger.LogError(ex, $"Can not save {model.ToJson()} to @(table.Name).");
            return this.InternalServerError(ex);
        }
    }

    /// <summary>
    /// 更新 @(table.GetSummary())
    /// </summary>
    /// <response code="200">更新成功，返回 @(table.GetSummary()) 信息</response>
    /// <response code="400">客户端发送错误请求</response>
    /// <response code="500">服务器内部错误</response>
    [HttpPut("{id:long}")]
    [Authorize("@(table.Name).update")]
    public async Task<ActionResult<@(table.ConvertedName)Model>> Update(
        [FromRoute]long id,
        [FromBody]@(table.ConvertedName)Model model
    ) {
        try {
            await repository.UpdateAsync(id, model);
            return model;
        }
        catch (InvalidOperationException ex) {
            logger.LogWarning(ex.GetOriginalMessage());
            return BadRequest();
        }
        catch (Exception ex) {
            logger.LogError(ex, $"Can not update @(table.Name) by id {id} with {model.ToJson()} .");
            return this.InternalServerError(ex);
        }
    }

    /// <summary>删除 @(table.GetSummary()) </summary>
    /// <response code="204">删除 @(table.GetSummary()) 成功</response>
    /// <response code="400">客户端发送错误请求</response>
    /// <response code="500">服务器内部错误</response>
    [HttpDelete("{id:long}")]
    [ProducesResponseType(204)]
    [Authorize("@(table.Name).delete")]
    public async Task<ActionResult> Delete(long id) {
        try {
            await repository.DeleteAsync(id);
            return NoContent();
        }
        catch (InvalidOperationException ex) {
            logger.LogWarning(ex.GetOriginalMessage());
            return BadRequest();
        }
        catch (Exception ex) {
            logger.LogError(ex, $"Can not delete @(table.Name) by id {id} .");
            return this.InternalServerError(ex);
        }
    }

}
