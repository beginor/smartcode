@using SmartCode
@using SmartCode.Generator.Entity
@using static SmartCode.Generator.RazorTemplates.Contributions.AppFx.Common
@inherits SmartCode.TemplateEngine.Impl.RazorCoreTemplate<SmartCode.BuildContext>
@{
    var project = Model.Project;
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
    var pkCols = table.Columns.Where(col => col.IsPrimaryKey).ToArray();
    var pkCount = pkCols.Count();
    var firstPk = pkCols.First();
    var normalCols = table.Columns.Where(col => !col.IsPrimaryKey);
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using NHibernate;
using NHibernate.Linq;
using Beginor.AppFx.Core;
using Beginor.AppFx.Repository.Hibernate;
using @(project.Author).@(project.Module).@(buildTask.Module).Entities;
using @(project.Author).@(project.Module).Models;

namespace @(project.Author).@(project.Module).@(buildTask.Module).Repositories;

/// <summary>@table.GetSummary()仓储实现</summary>
public partial class @(table.ConvertedName)Repository : HibernateRepository<@(table.ConvertedName), @(table.ConvertedName)Model, @(ConvertCsType(firstPk))>, I@(table.ConvertedName)Repository {

    public @(table.ConvertedName)Repository(ISession session, IMapper mapper) : base(session, mapper) { }

    /// <summary>搜索 @table.GetSummary() ，返回分页结果。</summary>
    public async Task<PaginatedResponseModel<@(table.ConvertedName)Model>> SearchAsync(
        @(table.ConvertedName)SearchModel model,
        CancellationToken token = default
    ) {
        var query = Session.Query<@(table.ConvertedName)>();
        // todo: 添加自定义查询；
        var total = await query.LongCountAsync();
        var data = await query.OrderByDescending(e => e.Id)
            .Skip(model.Skip).Take(model.Take)
            .ToListAsync();
        return new PaginatedResponseModel<@(table.ConvertedName)Model> {
            Total = total,
            Data = Mapper.Map<IList<@(table.ConvertedName)Model>>(data),
            Skip = model.Skip,
            Take = model.Take
        };
    }

@if (table.Columns.Any(c => c.Name.Equals("is_deleted"))) {<text>
    public override async Task DeleteAsync(long id, CancellationToken token = default) {
        var entity = Session.Get<@table.ConvertedName>(id);
        if (entity != null) {
            entity.IsDeleted = true;
            await Session.SaveAsync(entity, token);
            await Session.FlushAsync(token);
        }
    }
</text>
}
}
